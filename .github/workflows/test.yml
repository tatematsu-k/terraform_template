name: 'test'

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  TF_VERSION: '1.4.6'
  TF_WORKING_DIR: 'terraform'

permissions:
  contents: read

jobs:
  check_format_and_validation:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

  # terraform_plan:
  #   name: 'Terraform plan'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: ${{ env.TF_VERSION }}

  #     - name: Terraform Init
  #     id: init
  #     run: terraform init
  #     working-directory: ${{ env.TF_WORKING_DIR }}

  #     - name: Terraform Plan
  #       id: plan
  #       if: github.event_name == 'pull_request'
  #       run: terraform plan -no-color
  #       continue-on-error: true
  #       working-directory: ${{ env.TF_WORKING_DIR }}

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       uses: actions/github-script@v2
  #       with:
  #         script: |
  #           const { owner, repo, number } = context.issue;
  #           const body = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
  #           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\

  security_tfsec:
    name: 'secyrity check for tfsec'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform tfsec
        id: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          additional_args: "--exclude-downloaded-modules"

  security_checkov:
    name: 'secyrity check for checkov'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          output_format: cli,sarif
          output_file_path: console,results.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: success() || failure()
        with:
          sarif_file: results.sarif